{"version":3,"file":"DataSourceSettingsPage.8128b05ac04b15cbf98d.js","mappings":"ojBAqBO,MAAMA,UAAuBC,EAAAA,cAQlCC,YAAYC,GACVC,MAAMD,GADkB,iBAPO,MAOP,gFA0CRE,IAChBC,KAAKH,MAAMI,cAAcF,MAxCzBC,KAAKE,WAAa,CAChBC,KAAM,CAAEC,eAAgBP,EAAMQ,eAAgBC,SAASC,EAAAA,EAAAA,WAAUV,EAAME,aACvES,eAAgBR,KAAKQ,gBAEvBR,KAAKQ,eAAiBR,KAAKQ,eAAeC,KAAKT,MAGjDU,oBACE,MAAM,OAAEC,GAAWX,KAAKH,MAExB,GAAKG,KAAKY,UAILD,EAAOE,WAAWC,aAAc,CAGnC,MAAMC,GAASC,EAAAA,EAAAA,oBACTC,EAAW,qDAEjBjB,KAAKkB,UAAYH,EAAOI,KAAKnB,KAAKY,QAASZ,KAAKE,WAAYe,IAIhEG,mBAAmBC,GACjB,MAAM,OAAEV,GAAWX,KAAKH,MAC+D,MAAlFc,EAAOE,WAAWC,cAAgBd,KAAKH,MAAME,aAAesB,EAAUtB,aACzEC,KAAKE,WAAWC,KAAKG,SAAUC,EAAAA,EAAAA,WAAUP,KAAKH,MAAME,YAEpD,UAAAC,KAAKkB,iBAAL,SAAgBI,UAIpBC,uBACMvB,KAAKkB,WACPlB,KAAKkB,UAAUM,UAQnBC,SACE,MAAM,OAAEd,EAAF,WAAUZ,GAAeC,KAAKH,MAEpC,OAAKc,GAKH,gBAAKe,IAAMd,GAAaZ,KAAKY,QAAUA,EAAvC,SACGD,EAAOE,WAAWC,cACjBa,EAAAA,cAAoBhB,EAAOE,WAAWC,aAAc,CAClDc,QAAS7B,EACT8B,gBAAiB7B,KAAKQ,mBARrB,M,qGC3Eb,MAAM,MAAEsB,EAAF,OAASC,GAAWC,EAAAA,YA6C1B,EApCiC,EAAGC,eAAAA,EAAgBC,UAAAA,EAAWC,gBAAAA,EAAiBC,aAAAA,MAE5E,gBAAKC,UAAU,gBAAgB,aAAW,0CAA1C,UACE,iBAAKA,UAAU,iBAAf,WACE,iBAAKA,UAAU,uBAAuBC,MAAO,CAAEC,YAAa,OAA5D,iBACE,SAAC,EAAAC,gBAAD,CACEC,QACE,oHAFJ,oBAQA,SAACX,EAAD,CACEO,UAAU,6BACVK,KAAK,OACLC,MAAOV,EACPW,YAAY,OACZC,SAAWC,GAAUV,EAAaU,EAAMC,OAAOJ,OAC/CK,UAAQ,EACR,aAAYC,EAAAA,GAAAA,MAAAA,WAAAA,WAGhB,SAAClB,EAAD,CACEmB,MAAM,UACNC,QAASjB,EACTW,SAAWC,IAETX,EAAgBW,EAAMC,OAAOI,iB,2GCxBzC,MA0CA,EA1C6B,EAAGC,WAAAA,EAAYC,SAAAA,EAAUC,SAAAA,EAAUC,OAAAA,EAAQC,WAAAA,MACtE,MAAMC,GAAsBL,GAAcM,EAAAA,GAAAA,cAAyBC,EAAAA,GAAAA,kBAC7DC,GAAwBR,GAAcM,EAAAA,GAAAA,cAAyBC,EAAAA,GAAAA,mBAC/DE,EAAwBH,EAAAA,GAAAA,cAAyBC,EAAAA,GAAAA,oBAEvD,OACE,iBAAKtB,UAAU,qBAAf,WACE,SAAC,EAAAyB,WAAD,CAAYC,QAAQ,YAAYC,KAAK,QAAQC,KAAO,GAAEC,EAAAA,GAAAA,wBAAtD,mBAGA,SAAC,EAAAJ,WAAD,CAAYC,QAAQ,YAAYC,KAAK,QAAQC,KAAMT,EAAYW,UAAWN,EAA1E,sBAGA,SAAC,EAAAO,OAAD,CACE1B,KAAK,SACLqB,QAAQ,cACRI,UAAWP,EACXS,QAAShB,EACT,aAAYJ,EAAAA,GAAAA,MAAAA,WAAAA,OALd,oBASCQ,IACC,SAAC,EAAAW,OAAD,CACE1B,KAAK,SACLqB,QAAQ,UACRI,UAAWV,EACXY,QAAUvB,GAAUQ,EAASR,GAC7B,aAAYG,EAAAA,GAAAA,MAAAA,WAAAA,YALd,0BAUAQ,IACA,SAAC,EAAAW,OAAD,CAAQ1B,KAAK,SAASqB,QAAQ,UAAUM,QAASd,EAAjD,sB,siBC5CR,MAMae,EAA0B,EAAGvE,WAAAA,MAAiB,MACzD,IAAIwE,EAAS,GACTC,EAAU,GAGd,GAAIzE,EAAW0E,WAAY,UAAC1E,EAAW2E,eAAZ,QAAuB,GAAK,EACrD,OAAO,KAIT,GAAIR,EAAAA,GAAAA,UAAAA,UAA6BS,EAAAA,EAAAA,WAC/B,OAAO,KAGT,OAAQ5E,EAAW2C,MACjB,IAAK,aACH6B,EAAS,aACTC,EAAU,OACV,MACF,IAAK,OACHD,EAAS,OACTC,EAAU,aACV,MACF,QACE,OAAO,KAGX,OACE,SAACI,EAAA,EAAD,CAAoCC,WAlCd,gDAkC6CC,cAAc,EAAjF,SACG,CAACC,EAAaC,IACTD,EACK,MAGP,UAAC,EAAAE,MAAD,CACEC,MAAQ,kBAAiBX,sBACzBY,SAAS,OACTC,cAAe,EACfC,SAAU,KACRL,GAAU,IALd,wCAQ8BT,EAR9B,SAQ4CC,EAR5C,mFASwB,KACtB,cACEnC,UAAU,gBACV4B,KAAO,wEAAuElE,EAAW2C,gBACzFK,OAAO,SACPuC,IAAI,aACJJ,MAAM,8DALR,6CAVF,U,gQCoBV,MAAMK,EAAqB,CACzBC,iBADyB,KAEzBC,eAFyB,KAGzBC,kBAHyB,KAIzBC,iBAJyB,KAKzBC,aALyB,KAMzBC,iBANyB,KAOzBC,uBAPyB,KAQzBC,eARyB,KASzBC,cAAaA,EAAAA,GAGTC,GAAYC,EAAAA,EAAAA,UA1ClB,SAAyBC,EAAmBtG,GAC1C,MAAMuG,EAAevG,EAAMwG,MAAMC,OAAOC,IAClCD,EAAS,IAAIE,gBAAgB3G,EAAM4G,SAASC,QAC5C3G,GAAa4G,EAAAA,EAAAA,IAAcR,EAAMS,YAAaR,IAC9C,OAAEzF,EAAF,UAAUkG,EAAV,QAAqBC,EAArB,cAA8BC,GAAkBZ,EAAMa,mBACtDC,EAAOX,EAAOY,IAAI,QAElBC,EAAMxG,GACRyG,EAAAA,EAAAA,KAAiBC,EAAAA,EAAAA,IAActH,EAAYY,GAASsG,GAAQ,aAC5DK,EAAAA,EAAAA,IAAwB,YAEtBC,GAAWC,EAAAA,EAAAA,GACfrB,EAAMsB,SACNR,EAAQ,mBAAkBA,IAAU,uBAAsBb,IAC1De,GAGF,MAAO,CACLpH,YAAY4G,EAAAA,EAAAA,IAAcR,EAAMS,YAAaR,GAC7C/F,gBAAgBqH,EAAAA,EAAAA,IAAkBvB,EAAMS,YAAa7G,EAAW2C,MAChE0D,aAAcA,EACda,KAAAA,EACAtG,OAAAA,EACAkG,UAAAA,EACAC,QAAAA,EACAC,cAAAA,EACAQ,SAAAA,KAgBuChC,GAIpC,MAAMoC,UAA+BhI,EAAAA,cAAqB,iDAYpDiI,MAAAA,IACTC,EAAIC,uBAEE9H,KAAKH,MAAM8F,iBAAX,iBAAiC3F,KAAKH,MAAME,aAElDC,KAAK+F,oBAjBwD,iBAoBtD6B,MAAAA,IACPC,EAAIC,iBAEJ9H,KAAK+F,oBAvBwD,mBA0BpD,KACTgC,EAAAA,EAAAA,QACE,IAAIC,EAAAA,GAAsB,CACxB9C,MAAO,SACP+C,KAAO,wCAAuCjI,KAAKH,MAAME,WAAWmI,qBACpEC,QAAS,SACTC,KAAM,YACNC,UAAW,KACTrI,KAAKsI,uBAlCkD,wBAwC/C,KACdtI,KAAKH,MAAM2F,sBAzCkD,wBA4C9CzF,IACfC,KAAKH,MAAMgG,iBAAiB9F,MA5C9BW,oBACE,MAAM,uBAAEoF,EAAF,aAA0BM,GAAiBpG,KAAKH,MACtDiG,EAAuBM,GAGzB7E,uBACEvB,KAAKH,MAAMmG,cAAc,CACvBuC,cAAgBpC,GAAUA,EAAMa,qBAwCpC5D,aACE,OAA0C,IAAnCpD,KAAKH,MAAME,WAAW0E,SAG/B+D,0BACE,OACE,SAAC,EAAAvD,MAAD,CAAO,aAAYhC,EAAAA,GAAAA,MAAAA,WAAAA,SAAqCkC,SAAS,OAAOD,MAAM,0BAA9E,oJAOJuD,iCACE,cACE,SAAC,EAAAxD,MAAD,CAAOE,SAAS,OAAOD,MAAM,iBAA7B,2HAMJa,iBACE,MAAM,WAAEhG,EAAF,eAAcgG,GAAmB/F,KAAKH,MAC5CkG,EAAehG,EAAWmI,MAGX,oBACf,OAAOlI,KAAKH,MAAME,WAAW2I,GAAK,EAGpCC,sBACE,MAAM,WAAE5I,GAAeC,KAAKH,MACtB+I,EAAeC,KAAKC,UAAU,CAAEC,WAAYhJ,EAAWmI,KAAMc,QAAS,YAE5E,OADYC,EAAAA,QAAAA,UAAkB,WAAY,CAAEC,KAAMN,IAIpDO,kBACE,MAAM,UAAEtC,GAAc7G,KAAKH,MACrB+D,GAAwB5D,KAAKoD,cAAgBM,EAAAA,GAAAA,cAAyBC,EAAAA,GAAAA,mBAEtEyF,EAAO,CACXnB,KAAMpB,EACNwC,SAAU,oBACVjB,KAAM,wBAEFjB,EAAM,CACViC,KAAMA,EACNE,KAAMF,GAGR,OACE,SAACG,EAAA,EAAD,CAAMhC,SAAUJ,EAAhB,UACE,UAACoC,EAAA,WAAD,CAAeC,UAAWxJ,KAAKH,MAAMiH,QAArC,UACG9G,KAAKoD,cAAgBpD,KAAKwI,2BAC3B,iBAAKnG,UAAU,qBAAf,UACGuB,IACC,SAAC,EAAAQ,OAAD,CAAQ1B,KAAK,SAASqB,QAAQ,cAAcM,QAASrE,KAAKqD,SAA1D,oBAFJ,OAME,SAAC,EAAAS,WAAD,CAAYC,QAAQ,YAAYE,KAAK,cAAcD,KAAK,UAAxD,2BASVyF,qBAAqBxC,GACnB,MAAM,OAAEtG,GAAWX,KAAKH,MACxB,IAAKc,IAAWA,EAAO+I,YACrB,OAAO,KAGT,IAAK,MAAMC,KAAKhJ,EAAO+I,YACrB,GAAIC,EAAEjB,KAAOzB,EAEX,OAAO,SAAC0C,EAAEC,KAAH,CAAQjJ,OAAQA,EAAQkJ,MAAO,KAI1C,OAAO,8CAAsB5C,KAG/B6C,qBAAqB,UACnB,MAAM,cAAE/C,GAAkB/G,KAAKH,MAE/B,OACE,gCACGkH,MAAAA,GADH,UACGA,EAAegD,eADlB,aACG,EAAwBC,QACxBjD,MAAAA,GAAA,UAAAA,EAAegD,eAAf,SAAwBE,gBACvB,oBAAS3H,MAAO,CAAE4H,WAAY,YAA9B,SAA6CnD,MAAAA,GAA7C,UAA6CA,EAAegD,eAA5D,aAA6C,EAAwBE,iBACnE,QAKVE,iBACE,MAAM,eAAE9J,EAAF,kBAAkBqF,EAAlB,aAAqCE,EAArC,WAAmD7F,EAAnD,OAA+DY,EAA/D,cAAuEoG,GAAkB/G,KAAKH,MAC9F4D,EAAqBC,EAAAA,GAAAA,cAAyBC,EAAAA,GAAAA,kBAEpD,OACE,kBAAML,SAAUtD,KAAKsD,SAArB,WACIG,GAAsBzD,KAAKyI,iCAC5BzI,KAAKoD,cAAgBpD,KAAKwI,0BAC1BnI,EAAe8F,QACd,iBAAK9D,UAAU,UAAf,iBACE,kBAAOA,UAAU,yBAAjB,4BACA,kBAAOA,UAAU,2CAAjB,UACE,SAAC+H,EAAA,EAAD,CAAiBjE,MAAO9F,EAAe8F,cAK7C,SAAC7B,EAAD,CAAcvE,WAAYA,KAE1B,SAAC,EAAD,CACEkC,eAAgBlC,EAAWmI,KAC3BhG,UAAWnC,EAAWmC,UACtBC,gBAAkBgE,GAAUP,EAAaO,GACzC/D,aAAe8F,GAASxC,EAAkBwC,KAG3CvH,IACC,SAACjB,EAAD,CACEiB,OAAQA,EACRZ,WAAYA,EACZM,eAAgBA,EAChBJ,cAAeD,KAAKC,iBAIvB8G,MAAAA,OAAA,EAAAA,EAAeiD,WACd,gBAAK3H,UAAU,sBAAf,UACE,SAAC,EAAA4C,MAAD,CACEE,SAAmC,UAAzB4B,EAAcsD,OAAqB,QAAU,UACvDnF,MAAO6B,EAAciD,QACrB,aAAY/G,EAAAA,GAAAA,MAAAA,WAAAA,MAHd,SAKG8D,EAAcgD,SAAW/J,KAAK8J,0BAKrC,SAAC,EAAD,CACExG,SAAWR,GAAU9C,KAAKsD,SAASR,GACnCM,WAAYpD,KAAKoD,aACjBC,SAAUrD,KAAKqD,SACfE,OAAST,GAAU9C,KAAKuD,OAAOT,GAC/BU,WAAYxD,KAAK2I,2BAMzBlH,SACE,MAAM,SAAE8F,EAAF,KAAYN,EAAZ,UAAkBJ,EAAlB,QAA6BC,GAAY9G,KAAKH,MAEpD,OAAIgH,EACK7G,KAAKmJ,mBAIZ,SAACI,EAAA,EAAD,CAAMhC,SAAUA,EAAhB,UACE,SAACgC,EAAA,WAAD,CAAeC,UAAW1C,EAA1B,SACG9G,KAAKsK,eAAgB,yBAAMrD,EAAOjH,KAAKyJ,qBAAqBxC,GAAQjH,KAAKmK,mBAA0B,UAO9G,QAAelE,EAAU0B,I,uPCzSlB,MAAMyC,EAA8BvK,IACzC,MAAM0K,EASR,SAA6BpE,GAC3B,OAAQA,GACN,KAAKqE,EAAAA,YAAAA,WACH,MAAO,CACLvC,KAAM,aACNwC,MAAO,MACPhI,QAAU,sEAEd,KAAK+H,EAAAA,YAAAA,MACH,MAAO,CACLvC,KAAM,QACNwC,MAAO,OACPhI,QAAU,oFAEd,KAAK+H,EAAAA,YAAAA,KACH,MAAO,CACLvC,KAAM,OACNwC,MAAO,OACPhI,QAAU,0DAEd,QACE,OAAO,MA9BKiI,CAAoB7K,EAAMsG,OAE1C,OAAKoE,GAIE,SAAC,EAAAI,MAAD,CAAOF,MAAOF,EAAQE,MAAOvF,MAAOqF,EAAQ9H,QAASwF,KAAMsC,EAAQtC,KAAMG,KAAMmC,EAAQnC,OAHrF","sources":["webpack://grafana/./public/app/features/datasources/settings/PluginSettings.tsx","webpack://grafana/./public/app/features/datasources/settings/BasicSettings.tsx","webpack://grafana/./public/app/features/datasources/settings/ButtonRow.tsx","webpack://grafana/./public/app/features/datasources/settings/CloudInfoBox.tsx","webpack://grafana/./public/app/features/datasources/settings/DataSourceSettingsPage.tsx","webpack://grafana/./public/app/features/plugins/PluginStateInfo.tsx"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport { cloneDeep } from 'lodash';\nimport {\n  DataQuery,\n  DataSourceApi,\n  DataSourceJsonData,\n  DataSourcePlugin,\n  DataSourcePluginMeta,\n  DataSourceSettings,\n} from '@grafana/data';\nimport { AngularComponent, getAngularLoader } from '@grafana/runtime';\n\nexport type GenericDataSourcePlugin = DataSourcePlugin<DataSourceApi<DataQuery, DataSourceJsonData>>;\n\nexport interface Props {\n  plugin: GenericDataSourcePlugin;\n  dataSource: DataSourceSettings;\n  dataSourceMeta: DataSourcePluginMeta;\n  onModelChange: (dataSource: DataSourceSettings) => void;\n}\n\nexport class PluginSettings extends PureComponent<Props> {\n  element: HTMLDivElement | null = null;\n  component?: AngularComponent;\n  scopeProps: {\n    ctrl: { datasourceMeta: DataSourcePluginMeta; current: DataSourceSettings };\n    onModelChanged: (dataSource: DataSourceSettings) => void;\n  };\n\n  constructor(props: Props) {\n    super(props);\n\n    this.scopeProps = {\n      ctrl: { datasourceMeta: props.dataSourceMeta, current: cloneDeep(props.dataSource) },\n      onModelChanged: this.onModelChanged,\n    };\n    this.onModelChanged = this.onModelChanged.bind(this);\n  }\n\n  componentDidMount() {\n    const { plugin } = this.props;\n\n    if (!this.element) {\n      return;\n    }\n\n    if (!plugin.components.ConfigEditor) {\n      // React editor is not specified, let's render angular editor\n      // How to approach this better? Introduce ReactDataSourcePlugin interface and typeguard it here?\n      const loader = getAngularLoader();\n      const template = '<plugin-component type=\"datasource-config-ctrl\" />';\n\n      this.component = loader.load(this.element, this.scopeProps, template);\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { plugin } = this.props;\n    if (!plugin.components.ConfigEditor && this.props.dataSource !== prevProps.dataSource) {\n      this.scopeProps.ctrl.current = cloneDeep(this.props.dataSource);\n\n      this.component?.digest();\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.component) {\n      this.component.destroy();\n    }\n  }\n\n  onModelChanged = (dataSource: DataSourceSettings) => {\n    this.props.onModelChange(dataSource);\n  };\n\n  render() {\n    const { plugin, dataSource } = this.props;\n\n    if (!plugin) {\n      return null;\n    }\n\n    return (\n      <div ref={(element) => (this.element = element)}>\n        {plugin.components.ConfigEditor &&\n          React.createElement(plugin.components.ConfigEditor, {\n            options: dataSource,\n            onOptionsChange: this.onModelChanged,\n          })}\n      </div>\n    );\n  }\n}\n\nexport default PluginSettings;\n","import React, { FC } from 'react';\nimport { InlineFormLabel, LegacyForms } from '@grafana/ui';\nimport { selectors } from '@grafana/e2e-selectors';\n\nconst { Input, Switch } = LegacyForms;\n\nexport interface Props {\n  dataSourceName: string;\n  isDefault: boolean;\n  onNameChange: (name: string) => void;\n  onDefaultChange: (value: boolean) => void;\n}\n\nconst BasicSettings: FC<Props> = ({ dataSourceName, isDefault, onDefaultChange, onNameChange }) => {\n  return (\n    <div className=\"gf-form-group\" aria-label=\"Datasource settings page basic settings\">\n      <div className=\"gf-form-inline\">\n        <div className=\"gf-form max-width-30\" style={{ marginRight: '3px' }}>\n          <InlineFormLabel\n            tooltip={\n              'The name is used when you select the data source in panels. The default data source is ' +\n              'preselected in new panels.'\n            }\n          >\n            Name\n          </InlineFormLabel>\n          <Input\n            className=\"gf-form-input max-width-23\"\n            type=\"text\"\n            value={dataSourceName}\n            placeholder=\"Name\"\n            onChange={(event) => onNameChange(event.target.value)}\n            required\n            aria-label={selectors.pages.DataSource.name}\n          />\n        </div>\n        <Switch\n          label=\"Default\"\n          checked={isDefault}\n          onChange={(event) => {\n            // @ts-ignore\n            onDefaultChange(event.target.checked);\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default BasicSettings;\n","import React, { FC } from 'react';\nimport { selectors } from '@grafana/e2e-selectors';\n\nimport config from 'app/core/config';\nimport { Button, LinkButton } from '@grafana/ui';\n\nimport { AccessControlAction } from 'app/types/';\nimport { contextSrv } from 'app/core/core';\n\nexport interface Props {\n  exploreUrl: string;\n  isReadOnly: boolean;\n  onDelete: () => void;\n  onSubmit: (event: any) => void;\n  onTest: (event: any) => void;\n}\n\nconst ButtonRow: FC<Props> = ({ isReadOnly, onDelete, onSubmit, onTest, exploreUrl }) => {\n  const canEditDataSources = !isReadOnly && contextSrv.hasPermission(AccessControlAction.DataSourcesWrite);\n  const canDeleteDataSources = !isReadOnly && contextSrv.hasPermission(AccessControlAction.DataSourcesDelete);\n  const canExploreDataSources = contextSrv.hasPermission(AccessControlAction.DataSourcesExplore);\n\n  return (\n    <div className=\"gf-form-button-row\">\n      <LinkButton variant=\"secondary\" fill=\"solid\" href={`${config.appSubUrl}/datasources`}>\n        Back\n      </LinkButton>\n      <LinkButton variant=\"secondary\" fill=\"solid\" href={exploreUrl} disabled={!canExploreDataSources}>\n        Explore\n      </LinkButton>\n      <Button\n        type=\"button\"\n        variant=\"destructive\"\n        disabled={!canDeleteDataSources}\n        onClick={onDelete}\n        aria-label={selectors.pages.DataSource.delete}\n      >\n        Delete\n      </Button>\n      {canEditDataSources && (\n        <Button\n          type=\"submit\"\n          variant=\"primary\"\n          disabled={!canEditDataSources}\n          onClick={(event) => onSubmit(event)}\n          aria-label={selectors.pages.DataSource.saveAndTest}\n        >\n          Save &amp; test\n        </Button>\n      )}\n      {!canEditDataSources && (\n        <Button type=\"submit\" variant=\"primary\" onClick={onTest}>\n          Test\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default ButtonRow;\n","import { DataSourceSettings } from '@grafana/data';\nimport { Alert } from '@grafana/ui';\nimport React, { FC } from 'react';\nimport { config } from 'app/core/config';\nimport { GrafanaEdition } from '@grafana/data/src/types/config';\nimport { LocalStorageValueProvider } from 'app/core/components/LocalStorageValueProvider';\n\nconst LOCAL_STORAGE_KEY = 'datasources.settings.cloudInfoBox.isDismissed';\n\nexport interface Props {\n  dataSource: DataSourceSettings;\n}\n\nexport const CloudInfoBox: FC<Props> = ({ dataSource }) => {\n  let mainDS = '';\n  let extraDS = '';\n\n  // don't show for already configured data sources or provisioned data sources\n  if (dataSource.readOnly || (dataSource.version ?? 0) > 2) {\n    return null;\n  }\n\n  // Skip showing this info box in some editions\n  if (config.buildInfo.edition !== GrafanaEdition.OpenSource) {\n    return null;\n  }\n\n  switch (dataSource.type) {\n    case 'prometheus':\n      mainDS = 'Prometheus';\n      extraDS = 'Loki';\n      break;\n    case 'loki':\n      mainDS = 'Loki';\n      extraDS = 'Prometheus';\n      break;\n    default:\n      return null;\n  }\n\n  return (\n    <LocalStorageValueProvider<boolean> storageKey={LOCAL_STORAGE_KEY} defaultValue={false}>\n      {(isDismissed, onDismiss) => {\n        if (isDismissed) {\n          return null;\n        }\n        return (\n          <Alert\n            title={`Configure your ${mainDS} data source below`}\n            severity=\"info\"\n            bottomSpacing={4}\n            onRemove={() => {\n              onDismiss(true);\n            }}\n          >\n            Or skip the effort and get {mainDS} (and {extraDS}) as fully-managed, scalable, and hosted data sources from\n            Grafana Labs with the{' '}\n            <a\n              className=\"external-link\"\n              href={`https://grafana.com/signup/cloud/connect-account?src=grafana-oss&cnt=${dataSource.type}-settings`}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              title=\"The free plan includes 10k active metrics and 50gb storage.\"\n            >\n              free-forever Grafana Cloud plan\n            </a>\n            .\n          </Alert>\n        );\n      }}\n    </LocalStorageValueProvider>\n  );\n};\n","import React, { PureComponent } from 'react';\n// Components\nimport Page from 'app/core/components/Page/Page';\nimport { PluginSettings } from './PluginSettings';\nimport BasicSettings from './BasicSettings';\nimport ButtonRow from './ButtonRow';\n// Services & Utils\nimport appEvents from 'app/core/app_events';\nimport { contextSrv } from 'app/core/core';\n\n// Actions & selectors\nimport { getDataSource, getDataSourceMeta } from '../state/selectors';\nimport {\n  deleteDataSource,\n  initDataSourceSettings,\n  loadDataSource,\n  testDataSource,\n  updateDataSource,\n} from '../state/actions';\nimport { getNavModel } from 'app/core/selectors/navModel';\n\n// Types\nimport { StoreState, AccessControlAction } from 'app/types/';\nimport { DataSourceSettings, urlUtil } from '@grafana/data';\nimport { Alert, Button, LinkButton } from '@grafana/ui';\nimport { getDataSourceLoadingNav, buildNavModel, getDataSourceNav } from '../state/navModel';\nimport { PluginStateInfo } from 'app/features/plugins/PluginStateInfo';\nimport { dataSourceLoaded, setDataSourceName, setIsDefault } from '../state/reducers';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { CloudInfoBox } from './CloudInfoBox';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { cleanUpAction } from 'app/core/actions/cleanUp';\nimport { ShowConfirmModalEvent } from '../../../types/events';\n\nexport interface OwnProps extends GrafanaRouteComponentProps<{ uid: string }> {}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps) {\n  const dataSourceId = props.match.params.uid;\n  const params = new URLSearchParams(props.location.search);\n  const dataSource = getDataSource(state.dataSources, dataSourceId);\n  const { plugin, loadError, loading, testingStatus } = state.dataSourceSettings;\n  const page = params.get('page');\n\n  const nav = plugin\n    ? getDataSourceNav(buildNavModel(dataSource, plugin), page || 'settings')\n    : getDataSourceLoadingNav('settings');\n\n  const navModel = getNavModel(\n    state.navIndex,\n    page ? `datasource-page-${page}` : `datasource-settings-${dataSourceId}`,\n    nav\n  );\n\n  return {\n    dataSource: getDataSource(state.dataSources, dataSourceId),\n    dataSourceMeta: getDataSourceMeta(state.dataSources, dataSource.type),\n    dataSourceId: dataSourceId,\n    page,\n    plugin,\n    loadError,\n    loading,\n    testingStatus,\n    navModel,\n  };\n}\n\nconst mapDispatchToProps = {\n  deleteDataSource,\n  loadDataSource,\n  setDataSourceName,\n  updateDataSource,\n  setIsDefault,\n  dataSourceLoaded,\n  initDataSourceSettings,\n  testDataSource,\n  cleanUpAction,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport class DataSourceSettingsPage extends PureComponent<Props> {\n  componentDidMount() {\n    const { initDataSourceSettings, dataSourceId } = this.props;\n    initDataSourceSettings(dataSourceId);\n  }\n\n  componentWillUnmount() {\n    this.props.cleanUpAction({\n      stateSelector: (state) => state.dataSourceSettings,\n    });\n  }\n\n  onSubmit = async (evt: React.FormEvent<HTMLFormElement>) => {\n    evt.preventDefault();\n\n    await this.props.updateDataSource({ ...this.props.dataSource });\n\n    this.testDataSource();\n  };\n\n  onTest = async (evt: React.FormEvent<HTMLFormElement>) => {\n    evt.preventDefault();\n\n    this.testDataSource();\n  };\n\n  onDelete = () => {\n    appEvents.publish(\n      new ShowConfirmModalEvent({\n        title: 'Delete',\n        text: `Are you sure you want to delete the \"${this.props.dataSource.name}\" data source?`,\n        yesText: 'Delete',\n        icon: 'trash-alt',\n        onConfirm: () => {\n          this.confirmDelete();\n        },\n      })\n    );\n  };\n\n  confirmDelete = () => {\n    this.props.deleteDataSource();\n  };\n\n  onModelChange = (dataSource: DataSourceSettings) => {\n    this.props.dataSourceLoaded(dataSource);\n  };\n\n  isReadOnly() {\n    return this.props.dataSource.readOnly === true;\n  }\n\n  renderIsReadOnlyMessage() {\n    return (\n      <Alert aria-label={selectors.pages.DataSource.readOnly} severity=\"info\" title=\"Provisioned data source\">\n        This data source was added by config and cannot be modified using the UI. Please contact your server admin to\n        update this data source.\n      </Alert>\n    );\n  }\n\n  renderMissingEditRightsMessage() {\n    return (\n      <Alert severity=\"info\" title=\"Missing rights\">\n        You are not allowed to modify this data source. Please contact your server admin to update this data source.\n      </Alert>\n    );\n  }\n\n  testDataSource() {\n    const { dataSource, testDataSource } = this.props;\n    testDataSource(dataSource.name);\n  }\n\n  get hasDataSource() {\n    return this.props.dataSource.id > 0;\n  }\n\n  onNavigateToExplore() {\n    const { dataSource } = this.props;\n    const exploreState = JSON.stringify({ datasource: dataSource.name, context: 'explore' });\n    const url = urlUtil.renderUrl('/explore', { left: exploreState });\n    return url;\n  }\n\n  renderLoadError() {\n    const { loadError } = this.props;\n    const canDeleteDataSources = !this.isReadOnly() && contextSrv.hasPermission(AccessControlAction.DataSourcesDelete);\n\n    const node = {\n      text: loadError!,\n      subTitle: 'Data Source Error',\n      icon: 'exclamation-triangle',\n    };\n    const nav = {\n      node: node,\n      main: node,\n    };\n\n    return (\n      <Page navModel={nav}>\n        <Page.Contents isLoading={this.props.loading}>\n          {this.isReadOnly() && this.renderIsReadOnlyMessage()}\n          <div className=\"gf-form-button-row\">\n            {canDeleteDataSources && (\n              <Button type=\"submit\" variant=\"destructive\" onClick={this.onDelete}>\n                Delete\n              </Button>\n            )}\n            <LinkButton variant=\"secondary\" href=\"datasources\" fill=\"outline\">\n              Back\n            </LinkButton>\n          </div>\n        </Page.Contents>\n      </Page>\n    );\n  }\n\n  renderConfigPageBody(page: string) {\n    const { plugin } = this.props;\n    if (!plugin || !plugin.configPages) {\n      return null; // still loading\n    }\n\n    for (const p of plugin.configPages) {\n      if (p.id === page) {\n        // Investigate is any plugins using this? We should change this interface\n        return <p.body plugin={plugin} query={{}} />;\n      }\n    }\n\n    return <div>Page not found: {page}</div>;\n  }\n\n  renderAlertDetails() {\n    const { testingStatus } = this.props;\n\n    return (\n      <>\n        {testingStatus?.details?.message}\n        {testingStatus?.details?.verboseMessage ? (\n          <details style={{ whiteSpace: 'pre-wrap' }}>{testingStatus?.details?.verboseMessage}</details>\n        ) : null}\n      </>\n    );\n  }\n\n  renderSettings() {\n    const { dataSourceMeta, setDataSourceName, setIsDefault, dataSource, plugin, testingStatus } = this.props;\n    const canEditDataSources = contextSrv.hasPermission(AccessControlAction.DataSourcesWrite);\n\n    return (\n      <form onSubmit={this.onSubmit}>\n        {!canEditDataSources && this.renderMissingEditRightsMessage()}\n        {this.isReadOnly() && this.renderIsReadOnlyMessage()}\n        {dataSourceMeta.state && (\n          <div className=\"gf-form\">\n            <label className=\"gf-form-label width-10\">Plugin state</label>\n            <label className=\"gf-form-label gf-form-label--transparent\">\n              <PluginStateInfo state={dataSourceMeta.state} />\n            </label>\n          </div>\n        )}\n\n        <CloudInfoBox dataSource={dataSource} />\n\n        <BasicSettings\n          dataSourceName={dataSource.name}\n          isDefault={dataSource.isDefault}\n          onDefaultChange={(state) => setIsDefault(state)}\n          onNameChange={(name) => setDataSourceName(name)}\n        />\n\n        {plugin && (\n          <PluginSettings\n            plugin={plugin}\n            dataSource={dataSource}\n            dataSourceMeta={dataSourceMeta}\n            onModelChange={this.onModelChange}\n          />\n        )}\n\n        {testingStatus?.message && (\n          <div className=\"gf-form-group p-t-2\">\n            <Alert\n              severity={testingStatus.status === 'error' ? 'error' : 'success'}\n              title={testingStatus.message}\n              aria-label={selectors.pages.DataSource.alert}\n            >\n              {testingStatus.details && this.renderAlertDetails()}\n            </Alert>\n          </div>\n        )}\n\n        <ButtonRow\n          onSubmit={(event) => this.onSubmit(event)}\n          isReadOnly={this.isReadOnly()}\n          onDelete={this.onDelete}\n          onTest={(event) => this.onTest(event)}\n          exploreUrl={this.onNavigateToExplore()}\n        />\n      </form>\n    );\n  }\n\n  render() {\n    const { navModel, page, loadError, loading } = this.props;\n\n    if (loadError) {\n      return this.renderLoadError();\n    }\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={loading}>\n          {this.hasDataSource ? <div>{page ? this.renderConfigPageBody(page) : this.renderSettings()}</div> : null}\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nexport default connector(DataSourceSettingsPage);\n","import React, { FC } from 'react';\nimport { Badge, BadgeProps } from '@grafana/ui';\nimport { PluginState } from '@grafana/data';\n\ninterface Props {\n  state?: PluginState;\n}\n\nexport const PluginStateInfo: FC<Props> = (props) => {\n  const display = getFeatureStateInfo(props.state);\n\n  if (!display) {\n    return null;\n  }\n\n  return <Badge color={display.color} title={display.tooltip} text={display.text} icon={display.icon} />;\n};\n\nfunction getFeatureStateInfo(state?: PluginState): BadgeProps | null {\n  switch (state) {\n    case PluginState.deprecated:\n      return {\n        text: 'Deprecated',\n        color: 'red',\n        tooltip: `This feature is deprecated and will be removed in a future release`,\n      };\n    case PluginState.alpha:\n      return {\n        text: 'Alpha',\n        color: 'blue',\n        tooltip: `This feature is experimental and future updates might not be backward compatible`,\n      };\n    case PluginState.beta:\n      return {\n        text: 'Beta',\n        color: 'blue',\n        tooltip: `This feature is close to complete but not fully tested`,\n      };\n    default:\n      return null;\n  }\n}\n"],"names":["PluginSettings","PureComponent","constructor","props","super","dataSource","this","onModelChange","scopeProps","ctrl","datasourceMeta","dataSourceMeta","current","cloneDeep","onModelChanged","bind","componentDidMount","plugin","element","components","ConfigEditor","loader","getAngularLoader","template","component","load","componentDidUpdate","prevProps","digest","componentWillUnmount","destroy","render","ref","React","options","onOptionsChange","Input","Switch","LegacyForms","dataSourceName","isDefault","onDefaultChange","onNameChange","className","style","marginRight","InlineFormLabel","tooltip","type","value","placeholder","onChange","event","target","required","selectors","label","checked","isReadOnly","onDelete","onSubmit","onTest","exploreUrl","canEditDataSources","contextSrv","AccessControlAction","canDeleteDataSources","canExploreDataSources","LinkButton","variant","fill","href","config","disabled","Button","onClick","CloudInfoBox","mainDS","extraDS","readOnly","version","GrafanaEdition","LocalStorageValueProvider","storageKey","defaultValue","isDismissed","onDismiss","Alert","title","severity","bottomSpacing","onRemove","rel","mapDispatchToProps","deleteDataSource","loadDataSource","setDataSourceName","updateDataSource","setIsDefault","dataSourceLoaded","initDataSourceSettings","testDataSource","cleanUpAction","connector","connect","state","dataSourceId","match","params","uid","URLSearchParams","location","search","getDataSource","dataSources","loadError","loading","testingStatus","dataSourceSettings","page","get","nav","getDataSourceNav","buildNavModel","getDataSourceLoadingNav","navModel","getNavModel","navIndex","getDataSourceMeta","DataSourceSettingsPage","async","evt","preventDefault","appEvents","ShowConfirmModalEvent","text","name","yesText","icon","onConfirm","confirmDelete","stateSelector","renderIsReadOnlyMessage","renderMissingEditRightsMessage","id","onNavigateToExplore","exploreState","JSON","stringify","datasource","context","urlUtil","left","renderLoadError","node","subTitle","main","Page","isLoading","renderConfigPageBody","configPages","p","body","query","renderAlertDetails","details","message","verboseMessage","whiteSpace","renderSettings","PluginStateInfo","status","hasDataSource","display","PluginState","color","getFeatureStateInfo","Badge"],"sourceRoot":""}